rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper: check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper: check if user is an admin
    function isAdmin() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Helper: validate data structure
    function isValidRebuttal() {
      return request.resource.data.keys().hasAll(['title', 'category', 'createdAt', 'updatedAt']) &&
        request.resource.data.title is string &&
        request.resource.data.category is string &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp;
    }

    // Helper: validate category structure
    function isValidCategory() {
      return request.resource.data.keys().hasAll(['name', 'createdAt', 'updatedAt']) &&
        request.resource.data.name is string &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp;
    }

    // Admins collection - strict access
    match /admins/{userId} {
      allow read: if isAdmin();
      allow create: if isAdmin() && request.auth.uid == userId;
      allow update: if isAdmin() && request.auth.uid == userId;
      allow delete: if isAdmin() && request.auth.uid == userId;
    }

    // Users collection - strict access
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAdmin() && request.auth.uid == userId;
    }

    // Rebuttals collection - public read, admin write
    match /rebuttals/{document=**} {
      allow read: if true;
      allow create: if isAdmin() && isValidRebuttal();
      allow update: if isAdmin() && isValidRebuttal();
      allow delete: if isAdmin();
    }

    // Archived Rebuttals collection - admin only
    match /archived_rebuttals/{document=**} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Categories collection - public read, admin write
    match /categories/{document=**} {
      allow read: if true;
      allow create: if isAdmin() && isValidCategory();
      allow update: if isAdmin() && isValidCategory();
      allow delete: if isAdmin();
    }

    // Dispositions collection - public read, admin write
    match /dispositions/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Service Topics collection - public read, admin write
    match /serviceTopics/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Customer Service Categories collection - public read, admin write
    match /customerServiceCategories/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Global fallback - deny all unmatched documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}